// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: protos/coordinator.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrepInterfaceClient is the client API for GrepInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrepInterfaceClient interface {
	// Executes Grep on a remote machine.
	Grep(ctx context.Context, in *GrepRequest, opts ...grpc.CallOption) (*GrepResponse, error)
	CallWorkerCreateLogs(ctx context.Context, in *WorkerCreateLogsRequest, opts ...grpc.CallOption) (*WorkerCreateLogsResponse, error)
	CallWorkerDeleteLogs(ctx context.Context, in *WorkerDeleteLogsRequest, opts ...grpc.CallOption) (*WorkerDeleteLogsResponse, error)
}

type grepInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrepInterfaceClient(cc grpc.ClientConnInterface) GrepInterfaceClient {
	return &grepInterfaceClient{cc}
}

func (c *grepInterfaceClient) Grep(ctx context.Context, in *GrepRequest, opts ...grpc.CallOption) (*GrepResponse, error) {
	out := new(GrepResponse)
	err := c.cc.Invoke(ctx, "/grep.GrepInterface/Grep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grepInterfaceClient) CallWorkerCreateLogs(ctx context.Context, in *WorkerCreateLogsRequest, opts ...grpc.CallOption) (*WorkerCreateLogsResponse, error) {
	out := new(WorkerCreateLogsResponse)
	err := c.cc.Invoke(ctx, "/grep.GrepInterface/CallWorkerCreateLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grepInterfaceClient) CallWorkerDeleteLogs(ctx context.Context, in *WorkerDeleteLogsRequest, opts ...grpc.CallOption) (*WorkerDeleteLogsResponse, error) {
	out := new(WorkerDeleteLogsResponse)
	err := c.cc.Invoke(ctx, "/grep.GrepInterface/CallWorkerDeleteLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrepInterfaceServer is the server API for GrepInterface service.
// All implementations must embed UnimplementedGrepInterfaceServer
// for forward compatibility
type GrepInterfaceServer interface {
	// Executes Grep on a remote machine.
	Grep(context.Context, *GrepRequest) (*GrepResponse, error)
	CallWorkerCreateLogs(context.Context, *WorkerCreateLogsRequest) (*WorkerCreateLogsResponse, error)
	CallWorkerDeleteLogs(context.Context, *WorkerDeleteLogsRequest) (*WorkerDeleteLogsResponse, error)
	mustEmbedUnimplementedGrepInterfaceServer()
}

// UnimplementedGrepInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedGrepInterfaceServer struct {
}

func (UnimplementedGrepInterfaceServer) Grep(context.Context, *GrepRequest) (*GrepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grep not implemented")
}
func (UnimplementedGrepInterfaceServer) CallWorkerCreateLogs(context.Context, *WorkerCreateLogsRequest) (*WorkerCreateLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallWorkerCreateLogs not implemented")
}
func (UnimplementedGrepInterfaceServer) CallWorkerDeleteLogs(context.Context, *WorkerDeleteLogsRequest) (*WorkerDeleteLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallWorkerDeleteLogs not implemented")
}
func (UnimplementedGrepInterfaceServer) mustEmbedUnimplementedGrepInterfaceServer() {}

// UnsafeGrepInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrepInterfaceServer will
// result in compilation errors.
type UnsafeGrepInterfaceServer interface {
	mustEmbedUnimplementedGrepInterfaceServer()
}

func RegisterGrepInterfaceServer(s grpc.ServiceRegistrar, srv GrepInterfaceServer) {
	s.RegisterService(&GrepInterface_ServiceDesc, srv)
}

func _GrepInterface_Grep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrepInterfaceServer).Grep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grep.GrepInterface/Grep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrepInterfaceServer).Grep(ctx, req.(*GrepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrepInterface_CallWorkerCreateLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerCreateLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrepInterfaceServer).CallWorkerCreateLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grep.GrepInterface/CallWorkerCreateLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrepInterfaceServer).CallWorkerCreateLogs(ctx, req.(*WorkerCreateLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrepInterface_CallWorkerDeleteLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerDeleteLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrepInterfaceServer).CallWorkerDeleteLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grep.GrepInterface/CallWorkerDeleteLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrepInterfaceServer).CallWorkerDeleteLogs(ctx, req.(*WorkerDeleteLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrepInterface_ServiceDesc is the grpc.ServiceDesc for GrepInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrepInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grep.GrepInterface",
	HandlerType: (*GrepInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Grep",
			Handler:    _GrepInterface_Grep_Handler,
		},
		{
			MethodName: "CallWorkerCreateLogs",
			Handler:    _GrepInterface_CallWorkerCreateLogs_Handler,
		},
		{
			MethodName: "CallWorkerDeleteLogs",
			Handler:    _GrepInterface_CallWorkerDeleteLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/coordinator.proto",
}
