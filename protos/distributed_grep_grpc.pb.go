// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: protos/distributed_grep.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributedGrepClient is the client API for DistributedGrep service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributedGrepClient interface {
	// Relays client requests to coordinator.
	CallGrep(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*CoordinatorResponse, error)
	CallCreateLogs(ctx context.Context, in *CreateLogsRequest, opts ...grpc.CallOption) (*CreateLogsResponse, error)
	CallDeleteLogs(ctx context.Context, in *DeleteLogsRequest, opts ...grpc.CallOption) (*DeleteLogsResponse, error)
}

type distributedGrepClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributedGrepClient(cc grpc.ClientConnInterface) DistributedGrepClient {
	return &distributedGrepClient{cc}
}

func (c *distributedGrepClient) CallGrep(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*CoordinatorResponse, error) {
	out := new(CoordinatorResponse)
	err := c.cc.Invoke(ctx, "/DistributedGrep/CallGrep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedGrepClient) CallCreateLogs(ctx context.Context, in *CreateLogsRequest, opts ...grpc.CallOption) (*CreateLogsResponse, error) {
	out := new(CreateLogsResponse)
	err := c.cc.Invoke(ctx, "/DistributedGrep/CallCreateLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedGrepClient) CallDeleteLogs(ctx context.Context, in *DeleteLogsRequest, opts ...grpc.CallOption) (*DeleteLogsResponse, error) {
	out := new(DeleteLogsResponse)
	err := c.cc.Invoke(ctx, "/DistributedGrep/CallDeleteLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributedGrepServer is the server API for DistributedGrep service.
// All implementations must embed UnimplementedDistributedGrepServer
// for forward compatibility
type DistributedGrepServer interface {
	// Relays client requests to coordinator.
	CallGrep(context.Context, *ClientRequest) (*CoordinatorResponse, error)
	CallCreateLogs(context.Context, *CreateLogsRequest) (*CreateLogsResponse, error)
	CallDeleteLogs(context.Context, *DeleteLogsRequest) (*DeleteLogsResponse, error)
	mustEmbedUnimplementedDistributedGrepServer()
}

// UnimplementedDistributedGrepServer must be embedded to have forward compatible implementations.
type UnimplementedDistributedGrepServer struct {
}

func (UnimplementedDistributedGrepServer) CallGrep(context.Context, *ClientRequest) (*CoordinatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallGrep not implemented")
}
func (UnimplementedDistributedGrepServer) CallCreateLogs(context.Context, *CreateLogsRequest) (*CreateLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallCreateLogs not implemented")
}
func (UnimplementedDistributedGrepServer) CallDeleteLogs(context.Context, *DeleteLogsRequest) (*DeleteLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallDeleteLogs not implemented")
}
func (UnimplementedDistributedGrepServer) mustEmbedUnimplementedDistributedGrepServer() {}

// UnsafeDistributedGrepServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributedGrepServer will
// result in compilation errors.
type UnsafeDistributedGrepServer interface {
	mustEmbedUnimplementedDistributedGrepServer()
}

func RegisterDistributedGrepServer(s grpc.ServiceRegistrar, srv DistributedGrepServer) {
	s.RegisterService(&DistributedGrep_ServiceDesc, srv)
}

func _DistributedGrep_CallGrep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedGrepServer).CallGrep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DistributedGrep/CallGrep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedGrepServer).CallGrep(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedGrep_CallCreateLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedGrepServer).CallCreateLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DistributedGrep/CallCreateLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedGrepServer).CallCreateLogs(ctx, req.(*CreateLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedGrep_CallDeleteLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedGrepServer).CallDeleteLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DistributedGrep/CallDeleteLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedGrepServer).CallDeleteLogs(ctx, req.(*DeleteLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributedGrep_ServiceDesc is the grpc.ServiceDesc for DistributedGrep service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributedGrep_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DistributedGrep",
	HandlerType: (*DistributedGrepServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallGrep",
			Handler:    _DistributedGrep_CallGrep_Handler,
		},
		{
			MethodName: "CallCreateLogs",
			Handler:    _DistributedGrep_CallCreateLogs_Handler,
		},
		{
			MethodName: "CallDeleteLogs",
			Handler:    _DistributedGrep_CallDeleteLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/distributed_grep.proto",
}
